plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version '4.3.1.3277'
}

group = 'com.devcourse'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '20'
}

repositories {
    mavenCentral()
}

dependencies {
    // Redis Redisson Client
    implementation 'org.redisson:redisson-spring-boot-starter:3.17.7'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // THYMELEAF
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // WEBJARS - AXIOS
    implementation 'org.webjars.npm:axios:0.27.2'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // loging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // jwt
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //Json
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

configurations {
   all {
       exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
   }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.10'
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/xml/jacoco.xml")
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test
}

sonar {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", project.findProperty("sonar.token")
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "Sonar way"
        property "sonar.test.inclusions", "**/*Test.java"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/xml/jacoco.xml"
    }
}
